/*
 * Swagger Delivery
 *
 * Отвечает за учет курьеров, деспетчеризацию доставкуов, доставку
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * Generated by: https://openapi-generator.tech
 */

using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using System.Text;
using Newtonsoft.Json;

namespace DeliveryApp.Api.Adapters.Http.Contract.src.OpenApi.Models;

/// <summary>
/// </summary>
[DataContract]
public class Location : IEquatable<Location>
{
    /// <summary>
    ///     X
    /// </summary>
    /// <value>X</value>
    [Required]
    [DataMember(Name = "x", EmitDefaultValue = false)]
    public int X { get; set; }

    /// <summary>
    ///     Y
    /// </summary>
    /// <value>Y</value>
    [Required]
    [DataMember(Name = "y", EmitDefaultValue = false)]
    public int Y { get; set; }

    /// <summary>
    ///     Returns true if Location instances are equal
    /// </summary>
    /// <param name="other">Instance of Location to be compared</param>
    /// <returns>Boolean</returns>
    public bool Equals(Location other)
    {
        if (other is null) return false;
        if (ReferenceEquals(this, other)) return true;

        return
            (
                X == other.X ||
                X.Equals(other.X)
            ) &&
            (
                Y == other.Y ||
                Y.Equals(other.Y)
            );
    }

    /// <summary>
    ///     Returns the string presentation of the object
    /// </summary>
    /// <returns>String presentation of the object</returns>
    public override string ToString()
    {
        var sb = new StringBuilder();
        sb.Append("class Location {\n");
        sb.Append("  X: ").Append(X).Append("\n");
        sb.Append("  Y: ").Append(Y).Append("\n");
        sb.Append("}\n");
        return sb.ToString();
    }

    /// <summary>
    ///     Returns the JSON string presentation of the object
    /// </summary>
    /// <returns>JSON string presentation of the object</returns>
    public string ToJson()
    {
        return JsonConvert.SerializeObject(this, Formatting.Indented);
    }

    /// <summary>
    ///     Returns true if objects are equal
    /// </summary>
    /// <param name="obj">Object to be compared</param>
    /// <returns>Boolean</returns>
    public override bool Equals(object obj)
    {
        if (obj is null) return false;
        if (ReferenceEquals(this, obj)) return true;
        return obj.GetType() == GetType() && Equals((Location)obj);
    }

    /// <summary>
    ///     Gets the hash code
    /// </summary>
    /// <returns>Hash code</returns>
    public override int GetHashCode()
    {
        unchecked // Overflow is fine, just wrap
        {
            var hashCode = 41;
            // Suitable nullity checks etc, of course :)

            hashCode = hashCode * 59 + X.GetHashCode();

            hashCode = hashCode * 59 + Y.GetHashCode();
            return hashCode;
        }
    }

    #region Operators

#pragma warning disable 1591

    public static bool operator ==(Location left, Location right)
    {
        return Equals(left, right);
    }

    public static bool operator !=(Location left, Location right)
    {
        return !Equals(left, right);
    }

#pragma warning restore 1591

    #endregion Operators
}