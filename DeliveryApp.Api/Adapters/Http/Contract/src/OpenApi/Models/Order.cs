/*
 * Swagger Delivery
 *
 * Отвечает за учет курьеров, деспетчеризацию доставкуов, доставку
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * Generated by: https://openapi-generator.tech
 */

using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using System.Text;
using Newtonsoft.Json;

namespace DeliveryApp.Api.Adapters.Http.Contract.src.OpenApi.Models;

/// <summary>
/// </summary>
[DataContract]
public class Order : IEquatable<Order>
{
    /// <summary>
    ///     Идентификатор
    /// </summary>
    /// <value>Идентификатор</value>
    [Required]
    [DataMember(Name = "id", EmitDefaultValue = false)]
    public Guid Id { get; set; }

    /// <summary>
    ///     Gets or Sets Location
    /// </summary>
    [Required]
    [DataMember(Name = "location", EmitDefaultValue = false)]
    public Location Location { get; set; }

    /// <summary>
    ///     Returns true if Order instances are equal
    /// </summary>
    /// <param name="other">Instance of Order to be compared</param>
    /// <returns>Boolean</returns>
    public bool Equals(Order other)
    {
        if (other is null) return false;
        if (ReferenceEquals(this, other)) return true;

        return
            (
                Id == other.Id ||
                (Id != null &&
                 Id.Equals(other.Id))
            ) &&
            (
                Location == other.Location ||
                (Location != null &&
                 Location.Equals(other.Location))
            );
    }

    /// <summary>
    ///     Returns the string presentation of the object
    /// </summary>
    /// <returns>String presentation of the object</returns>
    public override string ToString()
    {
        var sb = new StringBuilder();
        sb.Append("class Order {\n");
        sb.Append("  Id: ").Append(Id).Append("\n");
        sb.Append("  Location: ").Append(Location).Append("\n");
        sb.Append("}\n");
        return sb.ToString();
    }

    /// <summary>
    ///     Returns the JSON string presentation of the object
    /// </summary>
    /// <returns>JSON string presentation of the object</returns>
    public string ToJson()
    {
        return JsonConvert.SerializeObject(this, Formatting.Indented);
    }

    /// <summary>
    ///     Returns true if objects are equal
    /// </summary>
    /// <param name="obj">Object to be compared</param>
    /// <returns>Boolean</returns>
    public override bool Equals(object obj)
    {
        if (obj is null) return false;
        if (ReferenceEquals(this, obj)) return true;
        return obj.GetType() == GetType() && Equals((Order)obj);
    }

    /// <summary>
    ///     Gets the hash code
    /// </summary>
    /// <returns>Hash code</returns>
    public override int GetHashCode()
    {
        unchecked // Overflow is fine, just wrap
        {
            var hashCode = 41;
            // Suitable nullity checks etc, of course :)
            if (Id != null)
                hashCode = hashCode * 59 + Id.GetHashCode();
            if (Location != null)
                hashCode = hashCode * 59 + Location.GetHashCode();
            return hashCode;
        }
    }

    #region Operators

#pragma warning disable 1591

    public static bool operator ==(Order left, Order right)
    {
        return Equals(left, right);
    }

    public static bool operator !=(Order left, Order right)
    {
        return !Equals(left, right);
    }

#pragma warning restore 1591

    #endregion Operators
}