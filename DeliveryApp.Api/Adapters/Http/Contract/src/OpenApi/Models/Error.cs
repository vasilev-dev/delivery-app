/*
 * Swagger Delivery
 *
 * Отвечает за учет курьеров, деспетчеризацию доставкуов, доставку
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * Generated by: https://openapi-generator.tech
 */

using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using System.Text;
using Newtonsoft.Json;

namespace DeliveryApp.Api.Adapters.Http.Contract.src.OpenApi.Models;

/// <summary>
/// </summary>
[DataContract]
public class Error : IEquatable<Error>
{
    /// <summary>
    ///     Код ошибки
    /// </summary>
    /// <value>Код ошибки</value>
    [Required]
    [DataMember(Name = "code", EmitDefaultValue = false)]
    public int Code { get; set; }

    /// <summary>
    ///     Текст ошибки
    /// </summary>
    /// <value>Текст ошибки</value>
    [Required]
    [DataMember(Name = "message", EmitDefaultValue = false)]
    public string Message { get; set; }

    /// <summary>
    ///     Returns true if Error instances are equal
    /// </summary>
    /// <param name="other">Instance of Error to be compared</param>
    /// <returns>Boolean</returns>
    public bool Equals(Error other)
    {
        if (other is null) return false;
        if (ReferenceEquals(this, other)) return true;

        return
            (
                Code == other.Code ||
                Code.Equals(other.Code)
            ) &&
            (
                Message == other.Message ||
                (Message != null &&
                 Message.Equals(other.Message))
            );
    }

    /// <summary>
    ///     Returns the string presentation of the object
    /// </summary>
    /// <returns>String presentation of the object</returns>
    public override string ToString()
    {
        var sb = new StringBuilder();
        sb.Append("class Error {\n");
        sb.Append("  Code: ").Append(Code).Append("\n");
        sb.Append("  Message: ").Append(Message).Append("\n");
        sb.Append("}\n");
        return sb.ToString();
    }

    /// <summary>
    ///     Returns the JSON string presentation of the object
    /// </summary>
    /// <returns>JSON string presentation of the object</returns>
    public string ToJson()
    {
        return JsonConvert.SerializeObject(this, Formatting.Indented);
    }

    /// <summary>
    ///     Returns true if objects are equal
    /// </summary>
    /// <param name="obj">Object to be compared</param>
    /// <returns>Boolean</returns>
    public override bool Equals(object obj)
    {
        if (obj is null) return false;
        if (ReferenceEquals(this, obj)) return true;
        return obj.GetType() == GetType() && Equals((Error)obj);
    }

    /// <summary>
    ///     Gets the hash code
    /// </summary>
    /// <returns>Hash code</returns>
    public override int GetHashCode()
    {
        unchecked // Overflow is fine, just wrap
        {
            var hashCode = 41;
            // Suitable nullity checks etc, of course :)

            hashCode = hashCode * 59 + Code.GetHashCode();
            if (Message != null)
                hashCode = hashCode * 59 + Message.GetHashCode();
            return hashCode;
        }
    }

    #region Operators

#pragma warning disable 1591

    public static bool operator ==(Error left, Error right)
    {
        return Equals(left, right);
    }

    public static bool operator !=(Error left, Error right)
    {
        return !Equals(left, right);
    }

#pragma warning restore 1591

    #endregion Operators
}